# utils/questions.py - –í–ï–†–°–ò–Ø –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú –í–´–ë–û–†–û–ú
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
–ü–û–î–î–ï–†–ñ–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –í–´–ë–û–†–ê –î–õ–Ø –ò–ì–† –ò –í–†–ï–ú–ï–ù–ò
"""

import logging
from typing import Dict, Any, Callable, List

logger = logging.getLogger(__name__)

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –í–û–ü–†–û–°–û–í –ê–ù–ö–ï–¢–´ - –ü–û–î–î–ï–†–ñ–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –í–´–ë–û–†–ê
# ============================================================================

PROFILE_QUESTIONS: Dict[str, Dict[str, Any]] = {
    "name": {
        "text": "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç –∏–ª–∏ –∫–∞–∫–æ–π —É –≤–∞—Å –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫?",
        "validation": lambda x: len(x.strip()) >= 2 and len(x.strip()) <= 50,
        "error": "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤"
    },
    
    "age": {
        "text": "üéÇ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (16-99)",
        "validation": lambda x: x.isdigit() and 16 <= int(x) <= 99,
        "error": "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 99",
        "process": lambda x: int(x)
    },
    
    "bio": {
        "text": "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—á—Ç–æ –ª—é–±–∏—Ç–µ –≤ –∏–≥—Ä–∞—Ö, –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è)",
        "validation": lambda x: len(x.strip()) >= 10 and len(x.strip()) <= 500,
        "error": "‚ùå –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)"
    },
    
    "games": {
        "text": "üéÆ –í –∫–∞–∫–∏–µ –∏–≥—Ä—ã –≤—ã –≥–æ—Ç–æ–≤—ã –∏–≥—Ä–∞—Ç—å?\n\nüí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        "type": "multiselect",  # –ù–û–í–´–ô –¢–ò–ü!
        "options": {
            "dota2": "üéÆ Dota 2",
            "cs2": "üî´ CS2/CS:GO", 
            "valorant": "üéØ Valorant",
            "lol": "‚öîÔ∏è League of Legends",
            "apex": "üî∫ Apex Legends",
            "overwatch": "ü¶æ Overwatch 2",
            "pubg": "ü™Ç PUBG",
            "fortnite": "üèóÔ∏è Fortnite",
            "other": "üé≤ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã"
        },
        "min_selections": 1,  # –ú–∏–Ω–∏–º—É–º –≤—ã–±–æ—Ä–æ–≤
        "max_selections": 5   # –ú–∞–∫—Å–∏–º—É–º –≤—ã–±–æ—Ä–æ–≤
    },
    
    "skill_level": {
        "text": "üèÜ –í–∞—à –ø—Ä–∏–º–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã?",
        "type": "keyboard", 
        "options": {
            "beginner": "üü¢ –ù–æ–≤–∏—á–æ–∫",
            "casual": "üü° –õ—é–±–∏—Ç–µ–ª—å", 
            "advanced": "üü† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
            "pro": "üî¥ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"
        }
    },
    
    "play_time": {
        "text": "‚è∞ –ö–æ–≥–¥–∞ –≤—ã –æ–±—ã—á–Ω–æ –≥–æ—Ç–æ–≤—ã –∏–≥—Ä–∞—Ç—å?\n\nüí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        "type": "multiselect",  # –ù–û–í–´–ô –¢–ò–ü!
        "options": {
            "early_morning": "üåÖ –†–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ (6-9)",
            "morning": "‚òÄÔ∏è –£—Ç—Ä–æ–º (9-12)",
            "afternoon": "üå§Ô∏è –î–Ω–µ–º (12-18)",
            "evening": "üåÜ –í–µ—á–µ—Ä–æ–º (18-22)", 
            "night": "üåô –ù–æ—á—å—é (22-2)",
            "late_night": "üåå –ü–æ–∑–¥–Ω–æ –Ω–æ—á—å—é (2-6)",
            "flexible": "üïê –í –ª—é–±–æ–µ –≤—Ä–µ–º—è"
        },
        "min_selections": 1,
        "max_selections": 4
    },
    
    "looking_for": {
        "text": "üéØ –ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ?\n\nüí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π",
        "type": "multiselect",
        "options": {
            "teammate": "üë• –¢–∏–º–º–µ–π—Ç–∞ –¥–ª—è –∏–≥—Ä",
            "friend": "ü§ù –î—Ä—É–≥–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è",
            "coach": "üìö –¢—Ä–µ–Ω–µ—Ä–∞",
            "student": "üéì –£—á–µ–Ω–∏–∫–∞",
            "team": "üèÜ –ö–æ–º–∞–Ω–¥—É",
            "relationship": "üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è"
        },
        "min_selections": 1,
        "max_selections": 3
    }
}

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–û–ü–†–û–°–ê–ú–ò
# ============================================================================

def get_question_keys() -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
    keys = list(PROFILE_QUESTIONS.keys())
    logger.info(f"üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: {keys}")
    return keys

def get_question(key: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á—É"""
    question = PROFILE_QUESTIONS.get(key, {})
    
    if not question:
        logger.error(f"‚ùå –í–æ–ø—Ä–æ—Å '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PROFILE_QUESTIONS!")
        logger.error(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {list(PROFILE_QUESTIONS.keys())}")
        return {}
    
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å '{key}': {question.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')[:50]}...")
    return question

def validate_answer(question_key: str, answer: str) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    question = get_question(question_key)
    
    if not question:
        error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {question_key}"
        logger.error(error_msg)
        return False, error_msg
    
    # –î–ª—è multiselect –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
    if question.get('type') == 'multiselect':
        logger.info(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è multiselect –≤–æ–ø—Ä–æ—Å–∞ '{question_key}'")
        return True, ""
    
    validation_func = question.get('validation')
    if validation_func:
        try:
            if not validation_func(answer):
                error_msg = question.get('error', '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç')
                logger.warning(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –¥–ª—è '{question_key}': {answer}")
                return False, error_msg
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è '{question_key}': {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞"
    
    logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –¥–ª—è '{question_key}': {answer}")
    return True, ""

def validate_multiselect_complete(question_key: str, selected_items: List[str]) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    """
    question = get_question(question_key)
    
    if not question:
        return False, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {question_key}"
    
    min_selections = question.get('min_selections', 1)
    max_selections = question.get('max_selections', 10)
    
    if len(selected_items) < min_selections:
        return False, f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º {min_selections} –≤–∞—Ä–∏–∞–Ω—Ç(–æ–≤)"
    
    if len(selected_items) > max_selections:
        return False, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {max_selections} –≤–∞—Ä–∏–∞–Ω—Ç(–æ–≤)"
    
    logger.info(f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è '{question_key}' –≤–∞–ª–∏–¥–µ–Ω: {selected_items}")
    return True, ""

def process_answer(question_key: str, answer: str) -> Any:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤)"""
    question = get_question(question_key)
    process_func = question.get('process')
    
    if process_func:
        try:
            processed = process_func(answer)
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ '{question_key}': {answer} ‚Üí {processed}")
            return processed
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{question_key}': {e}")
            return answer
    
    return answer

def is_keyboard_question(question_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    question = get_question(question_key)
    is_keyboard = question.get('type') == 'keyboard'
    logger.info(f"üîò –í–æ–ø—Ä–æ—Å '{question_key}' {'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç' if is_keyboard else '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç'} –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    return is_keyboard

def is_multiselect_question(question_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"""
    question = get_question(question_key)
    is_multiselect = question.get('type') == 'multiselect'
    logger.info(f"üîò –í–æ–ø—Ä–æ—Å '{question_key}' {'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç' if is_multiselect else '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç'} –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä")
    return is_multiselect

def get_keyboard_options(question_key: str) -> Dict[str, str]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    question = get_question(question_key)
    options = question.get('options', {})
    
    if not options and question.get('type') in ['keyboard', 'multiselect']:
        logger.warning(f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å '{question_key}' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ –∏–º–µ–µ—Ç –æ–ø—Ü–∏–π!")
    
    logger.info(f"üîò –û–ø—Ü–∏–∏ –¥–ª—è '{question_key}': {list(options.keys())}")
    return options

def get_multiselect_limits(question_key: str) -> tuple[int, int]:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    question = get_question(question_key)
    min_sel = question.get('min_selections', 1)
    max_sel = question.get('max_selections', 10)
    
    logger.info(f"üìä –õ–∏–º–∏—Ç—ã –¥–ª—è '{question_key}': –º–∏–Ω={min_sel}, –º–∞–∫—Å={max_sel}")
    return min_sel, max_sel

# ============================================================================
# –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–†–ò –ò–ú–ü–û–†–¢–ï
# ============================================================================

def validate_questions_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è"""
    errors = []
    
    for key, question in PROFILE_QUESTIONS.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'text' not in question:
            errors.append(f"–í–æ–ø—Ä–æ—Å '{key}' –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        if question.get('type') in ['keyboard', 'multiselect']:
            if 'options' not in question or not question['options']:
                errors.append(f"–í–æ–ø—Ä–æ—Å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π '{key}' –Ω–µ –∏–º–µ–µ—Ç –æ–ø—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        if question.get('type') == 'multiselect':
            min_sel = question.get('min_selections', 1)
            max_sel = question.get('max_selections', 10)
            
            if min_sel < 1:
                errors.append(f"–í–æ–ø—Ä–æ—Å '{key}': min_selections –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1")
            
            if max_sel < min_sel:
                errors.append(f"–í–æ–ø—Ä–æ—Å '{key}': max_selections –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= min_selections")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if 'validation' in question and 'error' not in question:
            errors.append(f"–í–æ–ø—Ä–æ—Å '{key}' –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
    
    if errors:
        logger.error("‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:")
        for error in errors:
            logger.error(f"  - {error}")
    else:
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∞–ª–∏–¥–Ω–∞")
    
    return len(errors) == 0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
validate_questions_config()

# ============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú –í–´–ë–û–†–û–ú
# ============================================================================

def format_selected_items(question_key: str, selected_keys: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    question = get_question(question_key)
    options = question.get('options', {})
    
    selected_texts = []
    for key in selected_keys:
        text = options.get(key, key)
        selected_texts.append(text)
    
    if len(selected_texts) == 0:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    elif len(selected_texts) == 1:
        return selected_texts[0]
    elif len(selected_texts) == 2:
        return f"{selected_texts[0]} –∏ {selected_texts[1]}"
    else:
        return f"{', '.join(selected_texts[:-1])} –∏ {selected_texts[-1]}"

def get_selection_status_text(question_key: str, selected_keys: List[str]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–æ—Ä–∞"""
    min_sel, max_sel = get_multiselect_limits(question_key)
    selected_count = len(selected_keys)
    
    status_parts = []
    
    if selected_count == 0:
        status_parts.append("–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
    else:
        formatted = format_selected_items(question_key, selected_keys)
        status_parts.append(f"–í—ã–±—Ä–∞–Ω–æ: {formatted}")
    
    if selected_count < min_sel:
        need_more = min_sel - selected_count
        status_parts.append(f"‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë {need_more}")
    elif selected_count >= max_sel:
        status_parts.append(f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({max_sel})")
    else:
        can_select = max_sel - selected_count
        status_parts.append(f"‚úÖ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –µ—â—ë {can_select}")
    
    return "\n".join(status_parts)