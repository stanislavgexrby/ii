# utils/texts.py - –í–ï–†–°–ò–Ø –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú –í–´–ë–û–†–û–ú
"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
–ü–û–î–î–ï–†–ñ–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –í–´–ë–û–†–ê
"""

from typing import Dict, Any, Optional, List

def format_profile_text(user_data: Dict[str, Any], include_contact: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    
    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        include_contact: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    if not user_data.get('profile_data'):
        return "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞"
    
    profile = user_data['profile_data']
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = f"üë§ {profile.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}"
    
    if profile.get('age'):
        text += f", {profile['age']} –ª–µ—Ç"
    
    text += "\n\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    if profile.get('bio'):
        text += f"üìù {profile['bio']}\n\n"
    
    # –ò–≥—Ä—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
    if profile.get('games'):
        games_text = _format_games_multiselect(profile['games'])
        text += f"üéÆ –ò–≥—Ä—ã: {games_text}\n"
    
    # –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã
    if profile.get('skill_level'):
        skill_text = _format_skill_level(profile['skill_level'])
        text += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {skill_text}\n"
    
    # –í—Ä–µ–º—è –∏–≥—Ä—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
    if profile.get('play_time'):
        time_text = _format_play_time_multiselect(profile['play_time'])
        text += f"‚è∞ –ò–≥—Ä–∞–µ—Ç: {time_text}\n"
    
    # –¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if profile.get('looking_for'):
        goals_text = _format_looking_for_multiselect(profile['looking_for'])
        text += f"üéØ –ò—â–µ—Ç: {goals_text}\n"
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if include_contact and user_data.get('username'):
        text += f"\nüí¨ Telegram: @{user_data['username']}"
    
    return text

def _format_games_multiselect(games_value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    games_map = {
        "dota2": "üéÆ Dota 2",
        "cs2": "üî´ CS2/CS:GO",
        "valorant": "üéØ Valorant",
        "lol": "‚öîÔ∏è League of Legends",
        "apex": "üî∫ Apex Legends",
        "overwatch": "ü¶æ Overwatch 2",
        "pubg": "ü™Ç PUBG",
        "fortnite": "üèóÔ∏è Fortnite",
        "other": "üé≤ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã"
    }
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
    if isinstance(games_value, list):
        if not games_value:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        formatted_games = []
        for game_key in games_value:
            game_text = games_map.get(game_key, game_key)
            formatted_games.append(game_text)
        
        return _join_list_naturally(formatted_games)
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    return games_map.get(games_value, games_value)

def _format_play_time_multiselect(time_value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    time_map = {
        "early_morning": "üåÖ –†–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ",
        "morning": "‚òÄÔ∏è –£—Ç—Ä–æ–º",
        "afternoon": "üå§Ô∏è –î–Ω–µ–º",
        "evening": "üåÜ –í–µ—á–µ—Ä–æ–º",
        "night": "üåô –ù–æ—á—å—é",
        "late_night": "üåå –ü–æ–∑–¥–Ω–æ –Ω–æ—á—å—é",
        "flexible": "üïê –í –ª—é–±–æ–µ –≤—Ä–µ–º—è"
    }
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
    if isinstance(time_value, list):
        if not time_value:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "flexible"
        if "flexible" in time_value:
            return "üïê –í –ª—é–±–æ–µ –≤—Ä–µ–º—è"
        
        formatted_times = []
        for time_key in time_value:
            time_text = time_map.get(time_key, time_key)
            formatted_times.append(time_text)
        
        return _join_list_naturally(formatted_times)
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    return time_map.get(time_value, time_value)

def _format_looking_for_multiselect(looking_for_value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"""
    goals_map = {
        "teammate": "üë• –¢–∏–º–º–µ–π—Ç–∞",
        "friend": "ü§ù –î—Ä—É–≥–∞",
        "coach": "üìö –¢—Ä–µ–Ω–µ—Ä–∞",
        "student": "üéì –£—á–µ–Ω–∏–∫–∞",
        "team": "üèÜ –ö–æ–º–∞–Ω–¥—É",
        "relationship": "üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è"
    }
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
    if isinstance(looking_for_value, list):
        if not looking_for_value:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        formatted_goals = []
        for goal_key in looking_for_value:
            goal_text = goals_map.get(goal_key, goal_key)
            formatted_goals.append(goal_text)
        
        return _join_list_naturally(formatted_goals)
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    return goals_map.get(looking_for_value, looking_for_value)

def _format_skill_level(skill: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã"""
    skill_map = {
        "beginner": "üü¢ –ù–æ–≤–∏—á–æ–∫",
        "casual": "üü° –õ—é–±–∏—Ç–µ–ª—å",
        "advanced": "üü† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 
        "pro": "üî¥ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"
    }
    return skill_map.get(skill, skill)

def _join_list_naturally(items: List[str]) -> str:
    """–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    if len(items) == 0:
        return ""
    elif len(items) == 1:
        return items[0]
    elif len(items) == 2:
        return f"{items[0]} –∏ {items[1]}"
    else:
        return f"{', '.join(items[:-1])} –∏ {items[-1]}"

def format_match_notification(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ"""
    name = "–ö—Ç–æ-—Ç–æ"
    if user_data.get('profile_data') and user_data['profile_data'].get('name'):
        name = user_data['profile_data']['name']
    
    return (
        f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á!\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –ª–∞–π–∫–Ω—É–ª –≤–∞—Å –≤–∑–∞–∏–º–Ω–æ!\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è."
    )

def format_matches_list(matches: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π"""
    if not matches:
        return (
            "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ª–∞–π–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã!"
        )
    
    text = "üíñ –í–∞—à–∏ –º–∞—Ç—á–∏:\n\n"
    
    for i, match in enumerate(matches, 1):
        profile = match.get('profile_data', {})
        name = profile.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        age = profile.get('age', '?')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text += f"{i}. {name}, {age} –ª–µ—Ç"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
        if profile.get('games'):
            games = _format_games_multiselect(profile['games'])
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            games_clean = games.replace('üéÆ ', '').replace('üî´ ', '').replace('üéØ ', '').replace('‚öîÔ∏è ', '').replace('üî∫ ', '').replace('ü¶æ ', '').replace('ü™Ç ', '').replace('üèóÔ∏è ', '').replace('üé≤ ', '')
            text += f" ‚Ä¢ {games_clean}"
        
        text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
        if match.get('username'):
            text += f"   üí¨ @{match['username']}\n"
        
        text += "\n"
    
    text += "üí¨ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram!"
    return text

def format_stats_message(stats: Dict[str, int]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    return (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_users', 0)}\n"
        f"üíñ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {stats.get('total_matches', 0)}\n"
        f"üëç –õ–∞–π–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_likes', 0)}"
    )

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME_MESSAGE = (
    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GameMatch!\n\n"
    "–ë–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –≥–µ–π–º–µ—Ä–æ–≤ Dota 2, CS2 –∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä.\n"
    "–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –∏ –Ω–∞–π–¥–∏—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!"
)

WELCOME_BACK_MESSAGE = "üéÆ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!"

PROFILE_CREATED_MESSAGE = (
    "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞.\n"
    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!"
)

PROFILE_UPDATED_MESSAGE = (
    "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
    "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
)

NO_MATCHES_MESSAGE = (
    "üòî –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
)

LIKE_SENT_MESSAGE = (
    "üíñ –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
    "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ª–∞–π–∫–Ω–µ—Ç –≤–∞—Å –≤ –æ—Ç–≤–µ—Ç - —ç—Ç–æ –±—É–¥–µ—Ç –º–∞—Ç—á!"
)

MATCH_CREATED_MESSAGE = (
    "üéâ –≠–¢–û –ú–ê–¢–ß! üíñ\n\n"
    "–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!\n"
    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è."
)

CREATE_PROFILE_FIRST_MESSAGE = (
    "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!"
)

PHOTO_REQUIRED_MESSAGE = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"

UNKNOWN_COMMAND_MESSAGE = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

USE_BUTTONS_MESSAGE = "üéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
MULTISELECT_INSTRUCTIONS = {
    "games": "üí° –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–≥—Ä–∞—Ç—å",
    "play_time": "üí° –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ —É–¥–æ–±–Ω—ã–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º–µ–Ω–∞",
    "looking_for": "üí° –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –≤–∞—à–∏ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"
}

def get_multiselect_instruction(question_key: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    return MULTISELECT_INSTRUCTIONS.get(question_key, "üí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")