# handlers/common.py
"""
–û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –æ—à–∏–±–∫–∏
–≠—Ç–æ—Ç —Ä–æ—É—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º!
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ErrorEvent
from aiogram.fsm.context import FSMContext

from keyboards.keyboards import Keyboards
from utils.texts import UNKNOWN_COMMAND_MESSAGE, USE_BUTTONS_MESSAGE

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
kb = Keyboards()

@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    await callback.answer(
        UNKNOWN_COMMAND_MESSAGE,
        show_alert=True
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback.message.edit_text(
            "üéÆ –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=kb.main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback: {e}")

@router.message()
async def handle_unknown_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    current_state = await state.get_state()
    
    if current_state:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–æ–º –¥–∏–∞–ª–æ–≥–µ
        # –ù–µ –º–µ—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    
    await message.answer(
        USE_BUTTONS_MESSAGE,
        reply_markup=kb.main_menu()
    )

@router.error()
async def error_handler(event: ErrorEvent):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    """
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {event.exception}", exc_info=True)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    try:
        if event.update.message:
            await event.update.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=kb.main_menu()
            )
        elif event.update.callback_query:
            await event.update.callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=kb.main_menu()
            )
            await event.update.callback_query.answer()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    return True  # –ü–æ–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@router.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    """
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "back")
async def handle_back(callback: CallbackQuery):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    """
    await callback.message.edit_text(
        "üéÆ GameMatch - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=kb.main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "reload")
async def handle_reload(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    """
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        "üéÆ GameMatch - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–±–∞–≥–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

@router.message(F.text == "/debug")
async def debug_info(message: Message):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    """
    from config.settings import Settings
    settings = Settings()
    
    if message.from_user.id != settings.ADMIN_ID:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    from database.database import Database
    db = Database()
    
    user = db.get_user(message.from_user.id)
    stats = db.get_stats()
    
    debug_text = (
        f"üîß Debug Info\n\n"
        f"User ID: {message.from_user.id}\n"
        f"Username: @{message.from_user.username}\n"
        f"Profile exists: {bool(user and user.get('profile_data'))}\n"
        f"Total users: {stats.get('total_users', 0)}\n"
        f"Active users: {stats.get('active_users', 0)}\n"
        f"Bot version: 1.0\n"
        f"Database: {db.db_path}"
    )
    
    await message.answer(debug_text)

@router.message(F.text.startswith("/admin"))
async def admin_commands(message: Message):
    """
    –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    """
    from config.settings import Settings
    settings = Settings()
    
    if message.from_user.id != settings.ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_parts = message.text.split()
    
    if len(command_parts) < 2:
        await message.answer(
            "üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/admin stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/admin cleanup - –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
            "/admin broadcast <message> - —Ä–∞—Å—Å—ã–ª–∫–∞"
        )
        return
    
    action = command_parts[1].lower()
    
    if action == "stats":
        from utils.texts import format_stats_message
        from database.database import Database
        
        db = Database()
        stats = db.get_stats()
        stats_text = format_stats_message(stats)
        
        await message.answer(stats_text)
    
    elif action == "cleanup":
        from database.database import Database
        
        db = Database()
        cleaned = db.cleanup_inactive_users(30)
        
        await message.answer(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    elif action == "broadcast":
        if len(command_parts) < 3:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        broadcast_text = " ".join(command_parts[2:])
        await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞: {broadcast_text}\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞")

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

async def log_user_activity(handler, event, data):
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user_id = None
    
    if hasattr(event, 'from_user') and event.from_user:
        user_id = event.from_user.id
    
    if user_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        from database.database import Database
        db = Database()
        db.update_user(user_id)
    
    return await handler(event, data)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware
router.message.middleware(log_user_activity)
router.callback_query.middleware(log_user_activity)