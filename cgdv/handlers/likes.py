# handlers/likes.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery

from database.database import Database
from keyboards.keyboards import Keyboards
from utils.texts import (
    format_profile_text, MATCH_CREATED, NEW_LIKE_NOTIFICATION
)

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
kb = Keyboards()

@router.callback_query(F.data == "my_likes")
async def show_my_likes(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∞–π–∫–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞
    user = db.get_user(user_id)
    if not user or not user['name']:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ –º–µ–Ω—è
    liked_by = db.get_users_who_liked_me(user_id)
    
    if not liked_by:
        text = (
            "‚ù§Ô∏è –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –ë—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ –≤ –ø–æ–∏—Å–∫–µ"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=kb.back_to_main()
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_like_profile(callback, liked_by, 0)

async def show_like_profile(callback: CallbackQuery, profiles: list, index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ª–∞–π–∫–Ω—É–ª"""
    if index >= len(profiles):
        # –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã
        text = (
            "‚úÖ –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n"
            "–ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ."
        )
        
        try:
            await safe_edit_message(
                callback.message,
                text,
                kb.back_to_main()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∞–π–∫–æ–≤: {e}")
        
        await callback.answer()
        return
    
    profile = profiles[index]
    profile_text = format_profile_text(profile)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –ª–∞–π–∫
    text = f"‚ù§Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –ª–∞–π–∫–Ω—É–ª –≤–∞—Å:\n\n{profile_text}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ callback_data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    target_user_id = profile['telegram_id']
    keyboard = kb.like_actions(target_user_id)
    
    try:
        if profile.get('photo_id'):
            # –° —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=keyboard
            )
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ - –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await safe_edit_message(
                callback.message,
                text,
                keyboard
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∞–π–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç—ã")

@router.callback_query(F.data.startswith("like_back_"))
async def like_back(callback: CallbackQuery, bot: Bot):
    """–õ–∞–π–∫–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç"""
    try:
        target_user_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è like_back: {callback.data}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞")
        return
    
    from_user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—Ç–∞–≤–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ –ª–∞–π–∫
    existing_like = db._execute_query(
        "SELECT id FROM likes WHERE from_user_id = ? AND to_user_id = ?",
        (from_user_id, target_user_id)
    )
    
    if existing_like:
        await callback.answer("‚ùå –í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ (—ç—Ç–æ —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –º–∞—Ç—á, —Ç–∞–∫ –∫–∞–∫ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–Ω—É–ª)
    is_match = db.add_like(from_user_id, target_user_id)
    
    if is_match:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        match_user = db.get_user(target_user_id)
        
        if match_user:
            profile_text = format_profile_text(match_user, show_contact=True)
            text = f"{MATCH_CREATED}\n\n{profile_text}"
        else:
            text = MATCH_CREATED
        
        keyboard = kb.contact_user(match_user.get('username') if match_user else None)
        
        try:
            await safe_edit_message(callback.message, text, keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞—Ç—á–∞: {e}")
            await callback.message.answer(text, reply_markup=keyboard)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_about_match(bot, target_user_id, from_user_id)
        
        logger.info(f"üíñ –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫: {from_user_id} <-> {target_user_id}")
    else:
        # –¢–∞–∫–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        try:
            await safe_edit_message(
                callback.message,
                "‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                kb.back_to_main()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–∞–π–∫–∞: {e}")
            await callback.message.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=kb.back_to_main())
    
    await callback.answer()

@router.callback_query(F.data.startswith("skip_like_"))
async def skip_like(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª–∞–π–∫"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ª–∞–π–∫–∏
    user_id = callback.from_user.id
    liked_by = db.get_users_who_liked_me(user_id)
    
    if len(liked_by) <= 1:
        # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫
        text = (
            "‚úÖ –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n"
            "–ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ."
        )
        
        try:
            await safe_edit_message(
                callback.message,
                text,
                kb.back_to_main()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∞–π–∫–æ–≤: {e}")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–π–∫ (—É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞)
        await show_like_profile(callback, liked_by[1:], 0)
    
    await callback.answer()

async def safe_edit_message(message, text: str, keyboard=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if message.photo:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.delete()
            await message.answer(text, reply_markup=keyboard)
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ likes: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=keyboard)

async def notify_about_match(bot: Bot, user_id: int, match_user_id: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–∞—Ç—á–µ"""
    try:
        match_user = db.get_user(match_user_id)
        
        if match_user:
            text = f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á!\n\n{match_user['name']} –ª–∞–π–∫–Ω—É–ª –≤–∞—Å –≤ –æ—Ç–≤–µ—Ç!"
        else:
            text = "üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á!"
        
        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=kb.back_to_main()
        )
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—á–∞–º–∏

@router.callback_query(F.data == "view_matches")
async def view_matches(callback: CallbackQuery):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–∞—Ç—á–∏"""
    user_id = callback.from_user.id
    
    matches = db.get_matches(user_id)
    
    if not matches:
        text = (
            "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏:\n"
            "‚Ä¢ –õ–∞–π–∫–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—ã –≤ –ø–æ–∏—Å–∫–µ\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=kb.back_to_main()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
    text = f"üíñ –í–∞—à–∏ –º–∞—Ç—á–∏ ({len(matches)}):\n\n"
    
    for i, match in enumerate(matches, 1):
        name = match['name']
        username = match.get('username', '–Ω–µ—Ç username')
        text += f"{i}. {name} (@{username})\n"
    
    text += "\nüí¨ –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –∏–∑ –Ω–∏—Ö!"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.back_to_main()
    )
    await callback.answer()