import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from database.database import Database
from keyboards.keyboards import Keyboards
from utils.texts import WELCOME_MESSAGE, WELCOME_BACK_MESSAGE, USE_BUTTONS_MESSAGE

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
kb = Keyboards()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    username = message.from_user.username
    
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    
    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        success = db.create_user(user_id, username)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            WELCOME_MESSAGE,
            reply_markup=kb.create_profile()
        )
    
    elif not user.get('profile_data') or not user['profile_data']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        await message.answer(
            WELCOME_MESSAGE,
            reply_markup=kb.create_profile()
        )
    
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–Ω–∫–µ—Ç–æ–π
        name = user['profile_data'].get('name', '–≥–µ–π–º–µ—Ä')
        welcome_text = WELCOME_BACK_MESSAGE.format(name=name)
        
        await message.answer(
            welcome_text,
            reply_markup=kb.main_menu()
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    db.update_user(user_id, username=username)

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    try:
        await callback.message.edit_text(
            "üéÆ GameMatch - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.main_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    settings_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, "
        "–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
        "üöß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    )
    
    try:
        await callback.message.edit_text(
            settings_text,
            reply_markup=kb.settings_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data.startswith("settings_"))
async def handle_settings(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    setting_type = callback.data.split("_")[1]
    
    if setting_type == "notifications":
        text = (
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "‚Ä¢ –û –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n"
            "‚Ä¢ –û –Ω–æ–≤—ã—Ö –ª–∞–π–∫–∞—Ö: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n\n"
            "üöß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
    
    elif setting_type == "privacy":
        text = (
            "üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω: ‚úÖ –î–∞\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç: ‚úÖ –î–∞\n"
            "‚Ä¢ –í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: üëÅÔ∏è –í—Å–µ–º\n\n"
            "üöß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
    
    elif setting_type == "stats":
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        user = db.get_user(user_id)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        likes_given = len(db._execute_query(
            "SELECT id FROM likes WHERE from_user_id = ?", 
            (user_id,)
        ))
        
        matches_count = len(db.get_user_matches(user_id))
        
        text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üëç –õ–∞–π–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {likes_given}\n"
            f"üíñ –ú–∞—Ç—á–µ–π: {matches_count}\n"
            f"üìÖ –í –±–æ—Ç–µ —Å: {user['created_at'][:10] if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        )
    
    else:
        text = "üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=kb.back_to_main()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
    """
    help_text = (
        "üéÆ GameMatch Bot - –ü–æ–º–æ—â—å\n\n"
        "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n\n"
        "üéØ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É\n"
        "2. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö\n"
        "3. –°—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏\n"
        "4. –ü—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –º–∞—Ç—á\n\n"
        "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    
    await message.answer(help_text, reply_markup=kb.main_menu())

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    from config.settings import Settings
    settings = Settings()
    
    if message.from_user.id != settings.ADMIN_ID:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        stats = db.get_stats()
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_users', 0)}\n"
            f"üíñ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {stats.get('total_matches', 0)}\n"
            f"üëç –õ–∞–π–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_likes', 0)}\n\n"
            f"üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –º–∞—Ç—á–∏: "
            f"{(stats.get('total_matches', 0) / max(stats.get('total_users', 1), 1) * 100):.1f}%"
        )
        
        await message.answer(stats_text, reply_markup=kb.admin_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_actions(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π
    """
    from config.settings import Settings
    settings = Settings()
    
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    action = callback.data.split("_")[1]
    
    if action == "stats":
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = db.get_stats()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_likes = len(db._execute_query("SELECT id FROM likes"))
        avg_age_result = db._execute_query(
            "SELECT AVG(CAST(JSON_EXTRACT(profile_data, '$.age') AS INTEGER)) as avg_age "
            "FROM users WHERE profile_data IS NOT NULL"
        )
        avg_age = avg_age_result[0]['avg_age'] if avg_age_result and avg_age_result[0]['avg_age'] else 0
        
        detailed_stats = (
            f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('active_users', 0)}\n"
            f"üíñ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {stats.get('total_matches', 0)}\n"
            f"üëç –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes}\n"
            f"üëç –õ–∞–π–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_likes', 0)}\n"
            f"üéÇ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_age:.1f} –ª–µ—Ç\n\n"
            f"üìà –ú–µ—Ç—Ä–∏–∫–∏:\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –º–∞—Ç—á–∏: {(stats.get('total_matches', 0) / max(total_likes, 1) * 100):.1f}%\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(stats.get('active_users', 0) / max(stats.get('total_users', 1), 1) * 100):.1f}%"
        )
        
        await callback.message.edit_text(detailed_stats, reply_markup=kb.back_to_main())
    
    elif action == "cleanup":
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cleaned = db.cleanup_inactive_users(30)
        
        await callback.message.edit_text(
            f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cleaned}\n"
            f"(–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 30 –¥–Ω–µ–π)",
            reply_markup=kb.back_to_main()
        )
    
    elif action == "broadcast":
        # –†–∞—Å—Å—ã–ª–∫–∞ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
        await callback.message.edit_text(
            "üì¢ –†–∞—Å—Å—ã–ª–∫–∞\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
            "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:\n"
            "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
            reply_markup=kb.back_to_main()
        )
    
    await callback.answer()

@router.message()
async def handle_unknown_text(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    # –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    
    await message.answer(
        USE_BUTTONS_MESSAGE,
        reply_markup=kb.main_menu()
    )