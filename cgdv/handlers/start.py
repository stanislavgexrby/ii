# handlers/start.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ä—Ç–∞ –∏ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from database.database import Database
from keyboards.keyboards import Keyboards
from utils.texts import (
    WELCOME_MESSAGE, SUBSCRIPTION_REQUIRED, SUBSCRIPTION_SUCCESS,
    HELP_MESSAGE
)
from config.settings import Settings

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
kb = Keyboards()
settings = Settings()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä –∏–≥—Ä—ã
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=kb.game_selection()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await message.answer(HELP_MESSAGE)

@router.callback_query(F.data.startswith("game_"))
async def select_game(callback: CallbackQuery, bot: Bot):
    """–í—ã–±–æ—Ä –∏–≥—Ä—ã"""
    game = callback.data.split("_")[1]  # dota –∏–ª–∏ cs
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    logger.info(f"üéÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É: {game}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    channel_id = settings.get_channel_id(game)
    
    try:
        member = await bot.get_chat_member(channel_id, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if member.status in ['member', 'administrator', 'creator']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
            await handle_subscription_success(callback, game)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            await request_subscription(callback, game, channel_id)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await handle_subscription_success(callback, game)

async def request_subscription(callback: CallbackQuery, game: str, channel_id: str):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    game_name = "Dota 2" if game == "dota" else "CS2"
    
    text = SUBSCRIPTION_REQUIRED.format(channel=channel_id)
    text += f"\n\nüéÆ –ò–≥—Ä–∞: {game_name}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –≤ callback_data
    keyboard = kb.confirm_subscription()
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º callback_data —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∏–≥—Ä—É
    new_keyboard = []
    for row in keyboard.inline_keyboard:
        new_row = []
        for button in row:
            if button.callback_data == "check_subscription":
                new_button = button.model_copy()
                new_button.callback_data = f"check_subscription_{game}"
                new_row.append(new_button)
            elif button.callback_data == "recheck_subscription":
                new_button = button.model_copy()
                new_button.callback_data = f"recheck_subscription_{game}"
                new_row.append(new_button)
            else:
                new_row.append(button)
        new_keyboard.append(new_row)
    
    from aiogram.types import InlineKeyboardMarkup
    modified_keyboard = InlineKeyboardMarkup(inline_keyboard=new_keyboard)
    
    await callback.message.edit_text(text, reply_markup=modified_keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("check_subscription_"))
async def check_subscription(callback: CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    game = callback.data.split("_")[2]  # dota –∏–ª–∏ cs
    user_id = callback.from_user.id
    channel_id = settings.get_channel_id(game)
    
    try:
        member = await bot.get_chat_member(channel_id, user_id)
        
        if member.status in ['member', 'administrator', 'creator']:
            await handle_subscription_success(callback, game)
        else:
            await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("recheck_subscription_"))
async def recheck_subscription(callback: CallbackQuery, bot: Bot):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await check_subscription(callback, bot)

async def handle_subscription_success(callback: CallbackQuery, game: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = db.get_user(user_id)
    
    if not user:
        success = db.create_user(user_id, username, game)
        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)
            return
        user = db.get_user(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    db.update_last_activity(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞
    has_profile = (user and user['name'] is not None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(callback, has_profile)

@router.callback_query(F.data == "main_menu")
async def show_main_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
        await callback.message.edit_text(
            WELCOME_MESSAGE,
            reply_markup=kb.game_selection()
        )
        await callback.answer()
        return
    
    has_profile = (user['name'] is not None)
    await show_main_menu(callback, has_profile)

async def show_main_menu(callback: CallbackQuery, has_profile: bool):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
    
    if has_profile:
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É:"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.main_menu(has_profile)
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != settings.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    stats = db.get_stats()
    
    text = (
        "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ Dota 2: {stats['dota_users']}\n"
        f"‚Ä¢ CS2: {stats['cs_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_users']}\n"
        f"‚Ä¢ –ú–∞—Ç—á–µ–π: {stats['total_matches']}\n"
        f"‚Ä¢ –õ–∞–π–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['today_likes']}"
    )
    
    await message.answer(text, reply_markup=kb.admin_menu())

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_actions(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    action = callback.data.split("_")[1]
    
    if action == "stats":
        stats = db.get_stats()
        
        text = (
            "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üéÆ Dota 2: {stats['dota_users']}\n"
            f"üî´ CS2: {stats['cs_users']}\n"
            f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_users']}\n"
            f"üíñ –ú–∞—Ç—á–µ–π: {stats['total_matches']}\n"
            f"üëç –õ–∞–π–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['today_likes']}\n\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(stats['active_users'] / max(stats['total_users'], 1) * 100):.1f}%"
        )
        
        await callback.message.edit_text(text, reply_markup=kb.back_to_main())
    
    elif action == "users":
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db._execute_query(
            "SELECT telegram_id, username, game, name, created_at FROM users ORDER BY created_at DESC LIMIT 10"
        )
        
        text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        
        for user in users:
            name = user['name'] if user['name'] else "–ë–µ–∑ –∞–Ω–∫–µ—Ç—ã"
            text += f"‚Ä¢ {name} (@{user['username'] or '–±–µ–∑ username'}) - {user['game']}\n"
        
        await callback.message.edit_text(text, reply_markup=kb.back_to_main())
    
    elif action == "cleanup":
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–º–µ—Ä)
        from datetime import datetime, timedelta
        
        month_ago = (datetime.now() - timedelta(days=30)).isoformat()
        inactive_count = len(db._execute_query(
            "SELECT id FROM users WHERE last_activity < ?", 
            (month_ago,)
        ))
        
        text = (
            f"üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–æ–ª–µ–µ 30 –¥–Ω–µ–π): {inactive_count}\n\n"
            f"üöß –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
        
        await callback.message.edit_text(text, reply_markup=kb.back_to_main())
    
    await callback.answer()