# handlers/matching.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–∞—Ç—á–∏–Ω–≥–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç, –ª–∞–π–∫–∏, –º–∞—Ç—á–∏
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery

from database.database import Database
from keyboards.keyboards import Keyboards
from utils.texts import (
    format_profile_text, format_matches_list, format_match_notification,
    CREATE_PROFILE_FIRST_MESSAGE, NO_MATCHES_MESSAGE, 
    LIKE_SENT_MESSAGE, MATCH_CREATED_MESSAGE
)

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
kb = Keyboards()

@router.callback_query(F.data == "browse")
async def browse_profiles(callback: CallbackQuery):
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∫–µ—Ç–∞
    user = db.get_user(user_id)
    
    if not user or not user.get('profile_data') or not user['profile_data']:
        await callback.message.edit_text(
            CREATE_PROFILE_FIRST_MESSAGE,
            reply_markup=kb.create_profile()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    matches = db.get_potential_matches(user_id, limit=1)
    
    if not matches:
        await callback.message.edit_text(
            NO_MATCHES_MESSAGE,
            reply_markup=kb.no_matches()
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
    await show_profile_for_browsing(callback, matches[0])

async def show_profile_for_browsing(callback: CallbackQuery, target_user: dict):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∞–π–∫/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    """
    profile_text = format_profile_text(target_user)
    target_user_id = target_user["telegram_id"]
    
    try:
        if target_user.get("photo_id"):
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=target_user["photo_id"],
                caption=profile_text,
                reply_markup=kb.browse_actions(target_user_id)
            )
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ
            await callback.message.edit_text(
                profile_text,
                reply_markup=kb.browse_actions(target_user_id)
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç—ã")

@router.callback_query(F.data.startswith("like_"))
async def process_like(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
    """
    try:
        target_user_id = int(callback.data.split("_")[1])
        from_user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ª–∞–π–∫–∞–µ—Ç —Å–∞–º —Å–µ–±—è
        if target_user_id == from_user_id:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –ª–∞–π–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        is_mutual_like = db.add_like(from_user_id, target_user_id)
        
        if is_mutual_like:
            # –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ - —Å–æ–∑–¥–∞–Ω –º–∞—Ç—á!
            await callback.message.edit_text(
                MATCH_CREATED_MESSAGE,
                reply_markup=kb.after_match()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–∞—Ç—á–µ
            await notify_about_match(target_user_id, from_user_id, callback.bot)
            
            logger.info(f"üíñ –°–æ–∑–¥–∞–Ω –º–∞—Ç—á –º–µ–∂–¥—É {from_user_id} –∏ {target_user_id}")
            
        else:
            # –û–±—ã—á–Ω—ã–π –ª–∞–π–∫
            await callback.message.edit_text(
                LIKE_SENT_MESSAGE,
                reply_markup=kb.after_like()
            )
            
            logger.info(f"üëç –õ–∞–π–∫ –æ—Ç {from_user_id} –∫ {target_user_id}")
        
        await callback.answer()
        
    except ValueError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ target_user_id –∏–∑ callback_data: {callback.data}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞")

@router.callback_query(F.data.startswith("skip_"))
async def process_skip(callback: CallbackQuery):
    """
    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é
    """
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º browse_profiles –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã
    await browse_profiles(callback)

@router.callback_query(F.data == "matches")
async def show_user_matches(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∫–µ—Ç–∞
    user = db.get_user(user_id)
    
    if not user or not user.get('profile_data') or not user['profile_data']:
        await callback.message.edit_text(
            CREATE_PROFILE_FIRST_MESSAGE,
            reply_markup=kb.create_profile()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    matches = db.get_user_matches(user_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
    matches_text = format_matches_list(matches)
    
    try:
        await callback.message.edit_text(
            matches_text,
            reply_markup=kb.view_matches()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞—Ç—á–µ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π")

async def notify_about_match(target_user_id: int, from_user_id: int, bot: Bot):
    """
    –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
        from_user = db.get_user(from_user_id)
        
        if not from_user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_text = format_match_notification(from_user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=target_user_id,
            text=notification_text,
            reply_markup=kb.view_matches()
        )
        
        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ: {e}")
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

@router.callback_query(F.data.startswith("view_match_"))
async def view_specific_match(callback: CallbackQuery):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    """
    try:
        match_user_id = int(callback.data.split("_")[2])
        current_user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–º–∞—Ç—á–∞
        match_user = db.get_user(match_user_id)
        
        if not match_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Ç—á
        user_matches = db.get_user_matches(current_user_id)
        is_match = any(match['telegram_id'] == match_user_id for match in user_matches)
        
        if not is_match:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –º–∞—Ç—á")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        profile_text = format_profile_text(match_user, include_contact=True)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–∞—Ç—á–µ–º
        match_actions = [
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={match_user_id}")],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –º–∞—Ç—á–µ–π", callback_data="matches")]
        ]
        
        match_keyboard = InlineKeyboardMarkup(inline_keyboard=match_actions)
        
        if match_user.get("photo_id"):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=match_user["photo_id"],
                caption=profile_text,
                reply_markup=match_keyboard
            )
        else:
            await callback.message.edit_text(
                profile_text,
                reply_markup=match_keyboard
            )
        
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ")

@router.callback_query(F.data == "who_liked_me")
async def show_who_liked_me(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è –≤ –±—É–¥—É—â–µ–º)
    """
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –æ–Ω –∏—Ö –µ—â–µ –Ω–µ—Ç
    liked_by = db._execute_query("""
        SELECT u.* FROM users u
        JOIN likes l ON u.telegram_id = l.from_user_id
        WHERE l.to_user_id = ?
        AND NOT EXISTS (
            SELECT 1 FROM likes l2 
            WHERE l2.from_user_id = ? AND l2.to_user_id = u.telegram_id
        )
        ORDER BY l.created_at DESC
        LIMIT 10
    """, (user_id, user_id))
    
    if not liked_by:
        text = "‚ù§Ô∏è –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏!"
    else:
        text = f"‚ù§Ô∏è –í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏ {len(liked_by)} —á–µ–ª–æ–≤–µ–∫(–∞):\n\n"
        
        for i, user in enumerate(liked_by, 1):
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            try:
                if user['profile_data']:
                    import json
                    profile_data = json.loads(user['profile_data'])
                    name = profile_data.get('name', '–ê–Ω–æ–Ω–∏–º')
                    age = profile_data.get('age', '?')
                else:
                    name = '–ê–Ω–æ–Ω–∏–º'
                    age = '?'
            except:
                name = '–ê–Ω–æ–Ω–∏–º'
                age = '?'
            
            text += f"{i}. {name}, {age} –ª–µ—Ç\n"
        
        text += "\nüí° –õ–∞–π–∫–Ω–∏—Ç–µ –∏—Ö –≤ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—á!"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.back_to_main()
    )
    await callback.answer()