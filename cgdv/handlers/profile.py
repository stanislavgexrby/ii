# handlers/profile.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database
from keyboards.keyboards import Keyboards
from utils.texts import (
    CREATE_PROFILE_MESSAGE, PROFILE_CREATED, PROFILE_UPDATED,
    PROFILE_DELETED, QUESTIONS, format_profile_text
)
from utils.validators import Validators
from config.settings import Settings

logger = logging.getLogger(__name__)
router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ProfileStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_nickname = State()
    waiting_for_age = State()
    waiting_for_rating = State()
    waiting_for_positions = State()
    waiting_for_additional_info = State()
    waiting_for_photo = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
kb = Keyboards()
validators = Validators()
settings = Settings()

@router.callback_query(F.data.in_(["create_profile", "edit_profile"]))
async def start_profile_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    is_editing = callback.data == "edit_profile"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(
        user_game=user['game'],
        is_editing=is_editing,
        positions_selected=[]
    )
    
    if is_editing:
        # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            current_name=user.get('name'),
            current_nickname=user.get('nickname'),
            current_age=user.get('age'),
            current_rating=user.get('rating'),
            current_positions=user.get('positions', []),
            current_additional_info=user.get('additional_info'),
            current_photo_id=user.get('photo_id')
        )
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–º–µ–Ω–∏
    await state.set_state(ProfileStates.waiting_for_name)
    
    text = CREATE_PROFILE_MESSAGE if not is_editing else "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n"
    text += QUESTIONS["name"]
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(ProfileStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error = validators.validate_name(name)
    if not is_valid:
        await message.answer(error)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∏–∫–Ω–µ–π–º—É
    await state.update_data(name=name)
    await state.set_state(ProfileStates.waiting_for_nickname)
    
    await message.answer(QUESTIONS["nickname"])

@router.message(ProfileStates.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    nickname = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error = validators.validate_nickname(nickname)
    if not is_valid:
        await message.answer(error)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
    await state.update_data(nickname=nickname)
    await state.set_state(ProfileStates.waiting_for_age)
    
    await message.answer(QUESTIONS["age"])

@router.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    age_str = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error = validators.validate_age(age_str)
    if not is_valid:
        await message.answer(error)
        return
    
    age = int(age_str)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–π—Ç–∏–Ω–≥—É
    await state.update_data(age=age)
    await state.set_state(ProfileStates.waiting_for_rating)
    
    data = await state.get_data()
    game = data['user_game']
    
    rating_text = "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥:"
    if game == "dota":
        rating_text += " (MMR –≤ Dota 2)"
    else:
        rating_text += " (—É—Ä–æ–≤–µ–Ω—å Faceit –≤ CS2)"
    
    await message.answer(rating_text, reply_markup=kb.rating_options(game))

@router.callback_query(F.data.startswith("rating_"), ProfileStates.waiting_for_rating)
async def process_rating(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    rating = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∑–∏—Ü–∏—è–º
    await state.update_data(rating=rating, positions_selected=[])
    await state.set_state(ProfileStates.waiting_for_positions)
    
    data = await state.get_data()
    game = data['user_game']
    
    position_text = "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏/—Ä–æ–ª–∏:\n\n"
    position_text += "üí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
    
    await callback.message.edit_text(
        position_text,
        reply_markup=kb.position_options(game, multiselect=True, selected=[])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pos_add_"), ProfileStates.waiting_for_positions)
async def add_position(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
    position = callback.data.split("_")[2]
    
    data = await state.get_data()
    positions_selected = data.get('positions_selected', [])
    game = data['user_game']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if position not in positions_selected:
        positions_selected.append(position)
        await state.update_data(positions_selected=positions_selected)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=kb.position_options(game, multiselect=True, selected=positions_selected)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pos_remove_"), ProfileStates.waiting_for_positions)
async def remove_position(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
    position = callback.data.split("_")[2]
    
    data = await state.get_data()
    positions_selected = data.get('positions_selected', [])
    game = data['user_game']
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if position in positions_selected:
        positions_selected.remove(position)
        await state.update_data(positions_selected=positions_selected)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=kb.position_options(game, multiselect=True, selected=positions_selected)
    )
    await callback.answer()

@router.callback_query(F.data == "pos_done", ProfileStates.waiting_for_positions)
async def positions_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
    data = await state.get_data()
    positions_selected = data.get('positions_selected', [])
    
    if not positions_selected:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await state.update_data(positions=positions_selected)
    await state.set_state(ProfileStates.waiting_for_additional_info)
    
    await callback.message.edit_text(QUESTIONS["additional_info"])
    await callback.answer()

@router.callback_query(F.data == "pos_need_select", ProfileStates.waiting_for_positions)
async def positions_need_select(callback: CallbackQuery):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏"""
    await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)

@router.callback_query(F.data == "pos_cancel", ProfileStates.waiting_for_positions)
async def cancel_positions(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.back_to_main()
    )
    await callback.answer()

@router.message(ProfileStates.waiting_for_additional_info)
async def process_additional_info(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    additional_info = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error = validators.validate_additional_info(additional_info)
    if not is_valid:
        await message.answer(error)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
    await state.update_data(additional_info=additional_info)
    await state.set_state(ProfileStates.waiting_for_photo)
    
    await message.answer(
        QUESTIONS["photo"],
        reply_markup=kb.skip_photo()
    )

@router.message(ProfileStates.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    photo_id = message.photo[-1].file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await save_profile(message, state, photo_id)

@router.callback_query(F.data == "skip_photo", ProfileStates.waiting_for_photo)
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —Ñ–æ—Ç–æ
    await save_profile_callback(callback, state, None)

@router.callback_query(F.data == "cancel_profile", ProfileStates.waiting_for_photo)
async def cancel_profile(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.back_to_main()
    )
    await callback.answer()

@router.message(ProfileStates.waiting_for_photo)
async def wrong_photo_format(message: Message):
    """–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'",
        reply_markup=kb.skip_photo()
    )

async def save_profile(message: Message, state: FSMContext, photo_id: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    data = await state.get_data()
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = db.update_user_profile(
        telegram_id=user_id,
        name=data['name'],
        nickname=data['nickname'],
        age=data['age'],
        rating=data['rating'],
        positions=data['positions'],
        additional_info=data['additional_info'],
        photo_id=photo_id
    )
    
    await state.clear()
    
    if success:
        is_editing = data.get('is_editing', False)
        success_text = PROFILE_UPDATED if is_editing else PROFILE_CREATED
        
        await message.answer(
            success_text,
            reply_markup=kb.back_to_main()
        )
        
        logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {'–æ–±–Ω–æ–≤–ª–µ–Ω' if is_editing else '—Å–æ–∑–¥–∞–Ω'} –¥–ª—è {user_id}")
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.back_to_main()
        )

async def save_profile_callback(callback: CallbackQuery, state: FSMContext, photo_id: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ callback"""
    data = await state.get_data()
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = db.update_user_profile(
        telegram_id=user_id,
        name=data['name'],
        nickname=data['nickname'],
        age=data['age'],
        rating=data['rating'],
        positions=data['positions'],
        additional_info=data['additional_info'],
        photo_id=photo_id
    )
    
    await state.clear()
    
    if success:
        is_editing = data.get('is_editing', False)
        success_text = PROFILE_UPDATED if is_editing else PROFILE_CREATED
        
        await callback.message.edit_text(
            success_text,
            reply_markup=kb.back_to_main()
        )
        
        logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {'–æ–±–Ω–æ–≤–ª–µ–Ω' if is_editing else '—Å–æ–∑–¥–∞–Ω'} –¥–ª—è {user_id}")
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.back_to_main()
        )
    
    await callback.answer()

@router.callback_query(F.data == "delete_profile")
async def confirm_delete_profile(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    text = (
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –≤–∞—à–∏ –ª–∞–π–∫–∏ –∏ –º–∞—Ç—á–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.confirm_delete()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def delete_profile(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    
    success = db.delete_user_profile(user_id)
    
    if success:
        await callback.message.edit_text(
            PROFILE_DELETED,
            reply_markup=kb.back_to_main()
        )
        
        logger.info(f"üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω –¥–ª—è {user_id}")
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.back_to_main()
        )
    
    await callback.answer()