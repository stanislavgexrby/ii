# handlers/profile.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
–ò–°–ü–†–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–ò–Ø send_safe_message
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from database.database import Database
from keyboards.keyboards import Keyboards, is_multiselect_callback, parse_multiselect_callback, format_multiselect_message
from utils.questions import (
    get_question_keys, get_question, validate_answer, 
    process_answer, is_keyboard_question, is_multiselect_question,
    validate_multiselect_complete, format_selected_items
)
from utils.texts import (
    format_profile_text, PROFILE_CREATED_MESSAGE, 
    PROFILE_UPDATED_MESSAGE, PHOTO_REQUIRED_MESSAGE,
    CREATE_PROFILE_FIRST_MESSAGE
)

logger = logging.getLogger(__name__)
router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ProfileStates(StatesGroup):
    waiting_for_input = State()
    waiting_for_multiselect = State()
    waiting_for_photo = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
kb = Keyboards()

@router.callback_query(F.data == "profile")
async def show_user_profile(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user or not user.get('profile_data') or not user['profile_data']:
        # –ê–Ω–∫–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        await callback.message.edit_text(
            CREATE_PROFILE_FIRST_MESSAGE,
            reply_markup=kb.create_profile()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile_text = format_profile_text(user)
    
    try:
        if user.get("photo_id"):
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=user["photo_id"],
                caption=profile_text,
                reply_markup=kb.profile_actions()
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                profile_text,
                reply_markup=kb.profile_actions()
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")

@router.callback_query(F.data.in_(["create_profile", "edit_profile"]))
async def start_profile_creation(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    """
    is_editing = callback.data == "edit_profile"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    question_keys = get_question_keys()
    
    if not question_keys:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤",
            reply_markup=kb.back_to_main()
        )
        return
    
    logger.info(f"üìù –ù–∞—á–∞–ª–æ {'—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' if is_editing else '—Å–æ–∑–¥–∞–Ω–∏—è'} –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {callback.from_user.id}")
    logger.info(f"üìã –í–æ–ø—Ä–æ—Å—ã: {question_keys}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        current_question_index=0,
        question_keys=question_keys,
        answers={},
        is_editing=is_editing,
        multiselect_selections={},
        last_message_id=None  # –ù–û–í–û–ï –ü–û–õ–ï –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    )
    
    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ask_current_question(callback.message, state, from_callback=True)
    await callback.answer()

async def ask_current_question(message: Message, state: FSMContext, from_callback: bool = False):
    """
    –ó–∞–¥–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∞–Ω–∫–µ—Ç—ã
    """
    data = await state.get_data()
    question_keys = data["question_keys"]
    current_index = data["current_question_index"]
    
    logger.info(f"üìã –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å {current_index + 1}/{len(question_keys)}")
    
    if current_index >= len(question_keys):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
        await state.set_state(ProfileStates.waiting_for_photo)
        
        await send_safe_message(
            message, 
            "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ",
            from_callback=from_callback
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question_key = question_keys[current_index]
    question = get_question(question_key)
    
    logger.info(f"üéØ –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question_key}")
    
    if not question:
        logger.error(f"‚ùå –í–æ–ø—Ä–æ—Å {question_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        await send_safe_message(
            message,
            f"‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å '{question_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            from_callback=from_callback
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if is_multiselect_question(question_key):
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        await state.set_state(ProfileStates.waiting_for_multiselect)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –≤—ã–±–æ—Ä
        data = await state.get_data()
        multiselect_selections = data.get("multiselect_selections", {})
        if question_key not in multiselect_selections:
            multiselect_selections[question_key] = []
            await state.update_data(multiselect_selections=multiselect_selections)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º multiselect –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = kb.multiselect_keyboard(question_key, multiselect_selections[question_key])
        message_text = format_multiselect_message(question_key, multiselect_selections[question_key])
        
        await send_safe_message(
            message,
            message_text,
            keyboard,
            from_callback=from_callback
        )
        
    elif is_keyboard_question(question_key):
        # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–∏–º –≤—ã–±–æ—Ä–æ–º
        await state.set_state(ProfileStates.waiting_for_input)
        keyboard = kb.question_keyboard(question_key)
        await send_safe_message(
            message,
            question["text"],
            keyboard,
            from_callback=from_callback
        )
    else:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await state.set_state(ProfileStates.waiting_for_input)
        await send_safe_message(
            message,
            question["text"],
            from_callback=from_callback
        )

async def send_safe_message(message: Message, text: str, keyboard=None, from_callback: bool = False):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
    
    try:
        if from_callback:
            # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback - –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ callback")
            try:
                await message.edit_text(text, reply_markup=keyboard)
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
                return
            except TelegramBadRequest as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        new_message = await message.answer(text, reply_markup=keyboard)
        logger.info(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ID {new_message.message_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        try:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. {text}")
        except Exception as fallback_error:
            logger.error(f"‚ùå –î–∞–∂–µ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_error}")

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
@router.callback_query(F.data.func(is_multiselect_callback), ProfileStates.waiting_for_multiselect)
async def process_multiselect_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    """
    try:
        question_key, action, item_key = parse_multiselect_callback(callback.data)
        
        logger.info(f"üîò Multiselect action: {question_key} ‚Üí {action} ‚Üí {item_key}")
        
        data = await state.get_data()
        multiselect_selections = data.get("multiselect_selections", {})
        current_selection = multiselect_selections.get(question_key, [])
        
        if action == "add":
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –≤—ã–±–æ—Ä
            if item_key not in current_selection:
                current_selection.append(item_key)
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {item_key}")
            
        elif action == "remove":
            # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –≤—ã–±–æ—Ä–∞
            if item_key in current_selection:
                current_selection.remove(item_key)
                logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {item_key}")
        
        elif action == "done":
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            is_valid, error_message = validate_multiselect_complete(question_key, current_selection)
            
            if not is_valid:
                await callback.answer(error_message, show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–∞–∫ –æ—Ç–≤–µ—Ç
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –≤—ã–±–æ—Ä –¥–ª—è '{question_key}': {current_selection}")
            await save_answer_and_continue(
                callback.message, 
                state, 
                question_key, 
                current_selection,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                from_callback=True
            )
            await callback.answer("‚úÖ –í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            return
        
        elif action == "cancel":
            # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
            await callback.answer("‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
            await state.clear()
            await callback.message.edit_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=kb.main_menu()
            )
            return
        
        elif action == "noop":
            # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            if item_key == "needmore":
                await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", show_alert=True)
            elif item_key == "separator":
                await callback.answer()
            else:
                await callback.answer("–ú–∞–∫—Å–∏–º—É–º –≤—ã–±–æ—Ä–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        multiselect_selections[question_key] = current_selection
        await state.update_data(multiselect_selections=multiselect_selections)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = kb.multiselect_keyboard(question_key, current_selection)
        message_text = format_multiselect_message(question_key, current_selection)
        
        try:
            await callback.message.edit_text(message_text, reply_markup=keyboard)
            logger.info("‚úÖ Multiselect –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except TelegramBadRequest as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å multiselect –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(message_text, reply_markup=keyboard)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ multiselect callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞")

# –ó–ê–ú–ï–ù–ò–¢–ï –§–£–ù–ö–¶–ò–Æ process_keyboard_answer –≤ handlers/profile.py:

@router.callback_query(F.data.startswith("answer_"), ProfileStates.waiting_for_input)
async def process_keyboard_answer(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä)
    –ò–°–ü–†–ê–í–õ–ï–ù –ü–ê–†–°–ò–ù–ì CALLBACK_DATA
    """
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì callback_data
        callback_text = callback.data
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º callback: {callback_text}")
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "answer_"
        if not callback_text.startswith("answer_"):
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å callback_data: {callback_text}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º "question_key_answer_value"
        remaining = callback_text[7:]  # —É–±–∏—Ä–∞–µ–º "answer_"
        logger.info(f"üîç –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞: {remaining}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ü–û–°–õ–ï–î–ù–ò–ô "_" —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å
        last_underscore = remaining.rfind("_")
        
        if last_underscore == -1:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '_' –≤: {remaining}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
            return
        
        question_key = remaining[:last_underscore]
        answer_value = remaining[last_underscore + 1:]
        
        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥:")
        logger.info(f"   üìã question_key: '{question_key}'")
        logger.info(f"   üí¨ answer_value: '{answer_value}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ question_key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        from utils.questions import get_question
        question = get_question(question_key)
        if not question:
            logger.error(f"‚ùå –í–æ–ø—Ä–æ—Å '{question_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞!")
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å '{question_key}'", show_alert=True)
            return
        
        logger.info(f"üîò –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {question_key} = {answer_value}")
        
        await save_answer_and_continue(callback.message, state, question_key, answer_value, from_callback=True)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")

@router.message(ProfileStates.waiting_for_input)
async def process_text_answer(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    data = await state.get_data()
    question_keys = data["question_keys"]
    current_index = data["current_question_index"]
    
    if current_index >= len(question_keys):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await state.clear()
        return
    
    question_key = question_keys[current_index]
    
    logger.info(f"‚úèÔ∏è –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {question_key} = {message.text}")
    
    await save_answer_and_continue(message, state, question_key, message.text, from_callback=False)

async def save_answer_and_continue(message: Message, state: FSMContext, question_key: str, answer, from_callback: bool = False):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    """
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç: {question_key} = {answer}")
    
    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ answer —É–∂–µ —Å–ø–∏—Å–æ–∫, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å—Ç—Ä–æ–∫–∞
    if isinstance(answer, list):
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω
        processed_answer = answer
        logger.info(f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç: {question_key} = {processed_answer}")
    else:
        # –û–±—ã—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, error_message = validate_answer(question_key, answer)
        
        if not is_valid:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {error_message}")
            await send_safe_message(message, error_message, from_callback=from_callback)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        processed_answer = process_answer(question_key, answer)
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {question_key} = {processed_answer}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    data = await state.get_data()
    answers = data["answers"]
    answers[question_key] = processed_answer
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_index = data["current_question_index"]
    next_index = current_index + 1
    
    logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É {next_index + 1}")
    
    await state.update_data(
        answers=answers,
        current_question_index=next_index
    )
    
    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await ask_current_question(message, state, from_callback=from_callback)

@router.message(ProfileStates.waiting_for_photo, F.photo)
async def process_profile_photo(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    """
    try:
        data = await state.get_data()
        answers = data["answers"]
        is_editing = data.get("is_editing", False)
        
        logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        logger.info(f"üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {answers}")
        
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
        photo_id = message.photo[-1].file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id
        username = message.from_user.username
        
        success = db.update_user(
            telegram_id=user_id,
            username=username,
            profile_data=answers,
            photo_id=photo_id
        )
        
        if success:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_message = PROFILE_UPDATED_MESSAGE if is_editing else PROFILE_CREATED_MESSAGE
            
            await message.answer(
                success_message,
                reply_markup=kb.main_menu()
            )
            
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {'–æ–±–Ω–æ–≤–ª–µ–Ω' if is_editing else '—Å–æ–∑–¥–∞–Ω'} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=kb.main_menu()
            )
            await state.clear()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=kb.main_menu()
        )
        await state.clear()

@router.message(ProfileStates.waiting_for_photo)
async def wrong_photo_format(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
    """
    await message.answer(PHOTO_REQUIRED_MESSAGE)

@router.callback_query(F.data == "skip_photo")
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞)
    """
    try:
        data = await state.get_data()
        answers = data["answers"]
        is_editing = data.get("is_editing", False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —Ñ–æ—Ç–æ
        user_id = callback.from_user.id
        username = callback.from_user.username
        
        success = db.update_user(
            telegram_id=user_id,
            username=username,
            profile_data=answers
        )
        
        if success:
            await state.clear()
            
            success_message = PROFILE_UPDATED_MESSAGE if is_editing else PROFILE_CREATED_MESSAGE
            
            await callback.message.edit_text(
                success_message + "\n\n‚ö†Ô∏è –ê–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è!",
                reply_markup=kb.main_menu()
            )
            
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=kb.main_menu()
            )
            await state.clear()
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "cancel_profile")
async def cancel_profile_creation(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    """
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.main_menu()
    )
    await callback.answer()