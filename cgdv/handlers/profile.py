# handlers/profile.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database
from keyboards.keyboards import Keyboards
from utils.questions import (
    get_question_keys, get_question, validate_answer, 
    process_answer, is_keyboard_question
)
from utils.texts import (
    format_profile_text, PROFILE_CREATED_MESSAGE, 
    PROFILE_UPDATED_MESSAGE, PHOTO_REQUIRED_MESSAGE,
    CREATE_PROFILE_FIRST_MESSAGE
)

logger = logging.getLogger(__name__)
router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ProfileStates(StatesGroup):
    waiting_for_input = State()
    waiting_for_photo = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
kb = Keyboards()

@router.callback_query(F.data == "profile")
async def show_user_profile(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user or not user.get('profile_data') or not user['profile_data']:
        # –ê–Ω–∫–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        await callback.message.edit_text(
            CREATE_PROFILE_FIRST_MESSAGE,
            reply_markup=kb.create_profile()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile_text = format_profile_text(user)
    
    try:
        if user.get("photo_id"):
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=user["photo_id"],
                caption=profile_text,
                reply_markup=kb.profile_actions()
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                profile_text,
                reply_markup=kb.profile_actions()
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")

@router.callback_query(F.data.in_(["create_profile", "edit_profile"]))
async def start_profile_creation(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    """
    is_editing = callback.data == "edit_profile"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    question_keys = get_question_keys()
    
    if not question_keys:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤",
            reply_markup=kb.back_to_main()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        current_question_index=0,
        question_keys=question_keys,
        answers={},
        is_editing=is_editing
    )
    
    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ask_current_question(callback.message, state)
    await callback.answer()

async def ask_current_question(message: Message, state: FSMContext):
    """
    –ó–∞–¥–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∞–Ω–∫–µ—Ç—ã
    """
    data = await state.get_data()
    question_keys = data["question_keys"]
    current_index = data["current_question_index"]
    
    if current_index >= len(question_keys):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
        await state.set_state(ProfileStates.waiting_for_photo)
        
        try:
            if hasattr(message, 'edit_text'):
                await message.edit_text("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
            else:
                await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ: {e}")
            await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question_key = question_keys[current_index]
    question = get_question(question_key)
    
    if not question:
        logger.error(f"–í–æ–ø—Ä–æ—Å {question_key} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await state.set_state(ProfileStates.waiting_for_input)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
    if is_keyboard_question(question_key):
        # –í–æ–ø—Ä–æ—Å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        keyboard = kb.question_keyboard(question_key)
        try:
            if hasattr(message, 'edit_text'):
                await message.edit_text(question["text"], reply_markup=keyboard)
            else:
                await message.answer(question["text"], reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
            await message.answer(question["text"], reply_markup=keyboard)
    else:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        try:
            if hasattr(message, 'edit_text'):
                await message.edit_text(question["text"])
            else:
                await message.answer(question["text"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await message.answer(question["text"])

@router.callback_query(F.data.startswith("answer_"), ProfileStates.waiting_for_input)
async def process_keyboard_answer(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: answer_question_key_answer_value
        parts = callback.data.split("_", 2)
        if len(parts) != 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
            return
        
        _, question_key, answer_value = parts
        
        await save_answer_and_continue(callback.message, state, question_key, answer_value)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")

@router.message(ProfileStates.waiting_for_input)
async def process_text_answer(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    """
    data = await state.get_data()
    question_keys = data["question_keys"]
    current_index = data["current_question_index"]
    
    if current_index >= len(question_keys):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await state.clear()
        return
    
    question_key = question_keys[current_index]
    await save_answer_and_continue(message, state, question_key, message.text)

async def save_answer_and_continue(message: Message, state: FSMContext, question_key: str, answer: str):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    is_valid, error_message = validate_answer(question_key, answer)
    
    if not is_valid:
        await message.answer(error_message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    processed_answer = process_answer(question_key, answer)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    data = await state.get_data()
    answers = data["answers"]
    answers[question_key] = processed_answer
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_index = data["current_question_index"]
    next_index = current_index + 1
    
    await state.update_data(
        answers=answers,
        current_question_index=next_index
    )
    
    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await ask_current_question(message, state)

@router.message(ProfileStates.waiting_for_photo, F.photo)
async def process_profile_photo(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    """
    try:
        data = await state.get_data()
        answers = data["answers"]
        is_editing = data.get("is_editing", False)
        
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
        photo_id = message.photo[-1].file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id
        username = message.from_user.username
        
        success = db.update_user(
            telegram_id=user_id,
            username=username,
            profile_data=answers,
            photo_id=photo_id
        )
        
        if success:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_message = PROFILE_UPDATED_MESSAGE if is_editing else PROFILE_CREATED_MESSAGE
            
            await message.answer(
                success_message,
                reply_markup=kb.main_menu()
            )
            
            logger.info(f"üìù –ü—Ä–æ—Ñ–∏–ª—å {'–æ–±–Ω–æ–≤–ª–µ–Ω' if is_editing else '—Å–æ–∑–¥–∞–Ω'} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=kb.main_menu()
            )
            await state.clear()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=kb.main_menu()
        )
        await state.clear()

@router.message(ProfileStates.waiting_for_photo)
async def wrong_photo_format(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
    """
    await message.answer(PHOTO_REQUIRED_MESSAGE)

@router.callback_query(F.data == "skip_photo")
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞)
    """
    try:
        data = await state.get_data()
        answers = data["answers"]
        is_editing = data.get("is_editing", False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —Ñ–æ—Ç–æ
        user_id = callback.from_user.id
        username = callback.from_user.username
        
        success = db.update_user(
            telegram_id=user_id,
            username=username,
            profile_data=answers
            # photo_id –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º
        )
        
        if success:
            await state.clear()
            
            success_message = PROFILE_UPDATED_MESSAGE if is_editing else PROFILE_CREATED_MESSAGE
            
            await callback.message.edit_text(
                success_message + "\n\n‚ö†Ô∏è –ê–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è!",
                reply_markup=kb.main_menu()
            )
            
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=kb.main_menu()
            )
            await state.clear()
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "cancel_profile")
async def cancel_profile_creation(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    """
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.main_menu()
    )
    await callback.answer()