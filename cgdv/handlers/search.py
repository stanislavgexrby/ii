# handlers/search.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database
from keyboards.keyboards import Keyboards
from utils.texts import (
    format_search_filters, format_profile_text, 
    NO_MORE_PROFILES, LIKE_SENT, MATCH_CREATED,
    NEW_LIKE_NOTIFICATION
)
from config.settings import Settings

logger = logging.getLogger(__name__)
router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchStates(StatesGroup):
    setting_filters = State()
    browsing_profiles = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
kb = Keyboards()
settings = Settings()

@router.callback_query(F.data == "search_teammates")
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user or not user['name']:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É", show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    await state.set_state(SearchStates.setting_filters)
    await state.update_data(
        user_game=user['game'],
        rating_filter=None,
        position_filter=None,
        current_profiles=[],
        current_index=0
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await show_search_filters(callback, state)

async def show_search_filters(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()
    game = data['user_game']
    rating_filter = data.get('rating_filter')
    position_filter = data.get('position_filter')
    
    text = format_search_filters(rating_filter, position_filter, game)
    
    try:
        await safe_edit_message(
            callback.message,
            text,
            kb.search_filters(game)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞: {e}")
    
    await callback.answer()

@router.callback_query(F.data == "filter_rating", SearchStates.setting_filters)
async def set_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
    data = await state.get_data()
    game = data['user_game']
    
    text = "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:"
    
    try:
        await safe_edit_message(
            callback.message,
            text,
            kb.rating_options(game)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
    
    await callback.answer()

@router.callback_query(F.data.startswith("rating_"), SearchStates.setting_filters)
async def save_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
    rating = callback.data.split("_")[1]
    
    await state.update_data(rating_filter=rating)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    await show_search_filters(callback, state)

@router.callback_query(F.data == "filter_position", SearchStates.setting_filters)
async def set_position_filter(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    data = await state.get_data()
    game = data['user_game']
    
    text = "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é:"
    
    try:
        await safe_edit_message(
            callback.message,
            text,
            kb.position_options(game, multiselect=False)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    await callback.answer()

@router.callback_query(F.data.startswith("pos_"), SearchStates.setting_filters)
async def save_position_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    position = callback.data.split("_")[1]
    
    await state.update_data(position_filter=position)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    await show_search_filters(callback, state)

@router.callback_query(F.data == "start_search", SearchStates.setting_filters)
async def begin_browsing(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç"""
    user_id = callback.from_user.id
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    profiles = db.get_potential_matches(
        user_id=user_id,
        rating_filter=data.get('rating_filter'),
        position_filter=data.get('position_filter'),
        limit=20
    )
    
    if not profiles:
        try:
            await safe_edit_message(
                callback.message,
                NO_MORE_PROFILES,
                kb.no_results()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ '–Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π': {e}")
        
        await callback.answer()
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await state.set_state(SearchStates.browsing_profiles)
    await state.update_data(
        current_profiles=profiles,
        current_index=0
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
    await show_current_profile(callback, state)

@router.callback_query(F.data == "continue_search", SearchStates.browsing_profiles)
async def continue_search(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ (–ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É)"""
    await show_next_profile(callback, state)

async def show_current_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    profiles = data['current_profiles']
    index = data['current_index']
    
    if index >= len(profiles):
        # –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        await callback.message.edit_text(
            NO_MORE_PROFILES,
            reply_markup=kb.no_results()
        )
        await callback.answer()
        return
    
    profile = profiles[index]
    profile_text = format_profile_text(profile)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—É
    try:
        if profile.get('photo_id'):
            # –° —Ñ–æ—Ç–æ
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=profile_text,
                reply_markup=kb.search_actions(profile['telegram_id'])
            )
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ
            await callback.message.edit_text(
                profile_text,
                reply_markup=kb.search_actions(profile['telegram_id'])
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç—ã: {e}")
        await show_next_profile(callback, state)

async def show_next_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    current_index = data['current_index']
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_index=current_index + 1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    await show_current_profile(callback, state)

@router.callback_query(F.data.startswith("skip_"))
async def skip_profile(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É"""
    await show_next_profile(callback, state)

@router.callback_query(F.data.startswith("like_") & ~F.data.startswith("like_back_"))
async def like_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–õ–∞–π–∫–Ω—É—Ç—å –∞–Ω–∫–µ—Ç—É"""
    try:
        target_user_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {callback.data}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞")
        return
    
    from_user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ª–∞–π–∫–∞–µ–º —Å–∞–º–∏ —Å–µ–±—è
    if target_user_id == from_user_id:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –ª–∞–π–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
    is_match = db.add_like(from_user_id, target_user_id)
    
    if is_match:
        # –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ - –º–∞—Ç—á!
        await callback.message.edit_text(
            MATCH_CREATED,
            reply_markup=kb.after_match()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_about_match(bot, target_user_id, from_user_id)
        
        logger.info(f"üíñ –ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω: {from_user_id} <-> {target_user_id}")
    else:
        # –û–±—ã—á–Ω—ã–π –ª–∞–π–∫
        await callback.message.edit_text(
            LIKE_SENT,
            reply_markup=kb.after_like()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ª–∞–π–∫–µ
        await notify_about_like(bot, target_user_id)
        
        logger.info(f"üëç –õ–∞–π–∫: {from_user_id} -> {target_user_id}")
    
    await callback.answer()

@router.callback_query(F.data == "view_last_match")
async def view_last_match(callback: CallbackQuery):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á
    matches = db.get_matches(user_id)
    
    if not matches:
        await callback.answer("‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    last_match = matches[0]  # –ü–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ = –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    
    profile_text = format_profile_text(last_match, show_contact=True)
    
    await callback.message.edit_text(
        f"üíñ –í–∞—à –º–∞—Ç—á:\n\n{profile_text}",
        reply_markup=kb.contact_user(last_match.get('username'))
    )
    await callback.answer()

async def notify_about_like(bot: Bot, user_id: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ª–∞–π–∫–µ"""
    try:
        await bot.send_message(
            chat_id=user_id,
            text=NEW_LIKE_NOTIFICATION,
            reply_markup=kb.back_to_main()
        )
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ: {e}")

async def notify_about_match(bot: Bot, user_id: int, match_user_id: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–∞—Ç—á–µ"""
    try:
        match_user = db.get_user(match_user_id)
        
        if match_user:
            text = f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á!\n\n{match_user['name']} –ª–∞–π–∫–Ω—É–ª –≤–∞—Å –≤–∑–∞–∏–º–Ω–æ!"
        else:
            text = "üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á!"
        
        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=kb.back_to_main()
        )
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
@router.callback_query(F.data == "main_menu", SearchStates.browsing_profiles)
async def exit_search(callback: CallbackQuery, state: FSMContext):
    """–í—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    has_profile = (user and user['name'] is not None)
    
    text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.main_menu(has_profile)
    )
    await callback.answer()

@router.callback_query(F.data == "main_menu", SearchStates.setting_filters)
async def exit_filters(callback: CallbackQuery, state: FSMContext):
    """–í—ã–π—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await exit_search(callback, state)