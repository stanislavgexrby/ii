# keyboards/__init__.py
"""–ü–∞–∫–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

# keyboards/keyboards.py
"""
–í—Å–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, List
from utils.questions import get_keyboard_options, is_keyboard_question

class Keyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        buttons = [
            [InlineKeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="profile")],
            [InlineKeyboardButton(text="üîç –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", callback_data="browse")],
            [InlineKeyboardButton(text="üíñ –ú–æ–∏ –º–∞—Ç—á–∏", callback_data="matches")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def create_profile() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
        buttons = [
            [InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="create_profile")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def profile_actions() -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–æ–π"""
        buttons = [
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
            [InlineKeyboardButton(text="üîç –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", callback_data="browse")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def browse_actions(target_user_id: int) -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —á—É–∂–æ–π –∞–Ω–∫–µ—Ç—ã"""
        buttons = [
            [
                InlineKeyboardButton(text="üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{target_user_id}"),
                InlineKeyboardButton(text="üíñ –õ–∞–π–∫", callback_data=f"like_{target_user_id}")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def after_like() -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–π–∫–∞"""
        buttons = [
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="browse")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def after_match() -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞"""
        buttons = [
            [InlineKeyboardButton(text="üíñ –ú–æ–∏ –º–∞—Ç—á–∏", callback_data="matches")],
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="browse")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def no_matches() -> InlineKeyboardMarkup:
        """–ö–æ–≥–¥–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π"""
        buttons = [
            [InlineKeyboardButton(text="üîç –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", callback_data="browse")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def view_matches() -> InlineKeyboardMarkup:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç—á–µ–π"""
        buttons = [
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="browse")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def settings_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        buttons = [
            [InlineKeyboardButton(text="üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="settings_privacy")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings_stats")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def admin_menu() -> InlineKeyboardMarkup:
        """–ê–¥–º–∏–Ω –º–µ–Ω—é"""
        buttons = [
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="admin_cleanup")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def question_keyboard(question_key: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å –æ–ø—Ü–∏—è–º–∏
        
        Args:
            question_key: –ö–ª—é—á –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ PROFILE_QUESTIONS
        """
        if not is_keyboard_question(question_key):
            return None
        
        options = get_keyboard_options(question_key)
        buttons = []
        
        for key, text in options.items():
            button = InlineKeyboardButton(
                text=text, 
                callback_data=f"answer_{question_key}_{key}"
            )
            buttons.append([button])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def back_to_main() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        buttons = [
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    @staticmethod
    def confirm_action(action: str, confirm_data: str, cancel_data: str = "main_menu") -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            confirm_data: callback_data –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            cancel_data: callback_data –¥–ª—è –æ—Ç–º–µ–Ω—ã
        """
        buttons = [
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=confirm_data),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=cancel_data)
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

def create_keyboard_from_dict(options: Dict[str, str], callback_prefix: str = "") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è –æ–ø—Ü–∏–π
    
    Args:
        options: –°–ª–æ–≤–∞—Ä—å {callback_data: text}
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    """
    buttons = []
    for callback_data, text in options.items():
        full_callback = f"{callback_prefix}{callback_data}" if callback_prefix else callback_data
        button = InlineKeyboardButton(text=text, callback_data=full_callback)
        buttons.append([button])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_keyboard_grid(options: Dict[str, str], columns: int = 2) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏
    
    Args:
        options: –°–ª–æ–≤–∞—Ä—å {callback_data: text}
        columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
    """
    buttons = []
    row = []
    
    for callback_data, text in options.items():
        button = InlineKeyboardButton(text=text, callback_data=callback_data)
        row.append(button)
        
        if len(row) == columns:
            buttons.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if row:
        buttons.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def add_back_button(keyboard: InlineKeyboardMarkup, back_callback: str = "main_menu") -> InlineKeyboardMarkup:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    
    Args:
        keyboard: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        back_callback: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    """
    buttons = keyboard.inline_keyboard.copy()
    back_button = [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]
    buttons.append(back_button)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)