import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    CallbackQueryHandler,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "8495792418:AAFNWoOWEiC14yckH4vacJZkV561FcOaOsk"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MOOD, REASON = range(2)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data (–∏–∑–±–µ–≥–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫)
(
    MOOD_GOOD, MOOD_NORMAL, MOOD_BAD, 
    TELL_REASON, NEED_HUG, CANCEL
) = (
    'mood_good', 'mood_normal', 'mood_bad', 
    'tell_reason', 'need_hug', 'cancel'
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_mood_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ª–∏—á–Ω–æ! üòä", callback_data=MOOD_GOOD)],
        [InlineKeyboardButton("–ù–æ—Ä–º–∞–ª—å–Ω–æ üôÇ", callback_data=MOOD_NORMAL)],
        [InlineKeyboardButton("–ü–ª–æ—Ö–æ üòî", callback_data=MOOD_BAD)]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_bad_mood_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É", callback_data=TELL_REASON)],
        [InlineKeyboardButton("–ü—Ä–æ—Å—Ç–æ –æ–±–Ω—è—Ç—å ü§ó", callback_data=NEED_HUG)]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ç–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º.\n'
        '–ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?',
        reply_markup=create_mood_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if query.data == MOOD_GOOD:
        await query.edit_message_text(text="–ö—Ä—É—Ç–æ! –†–∞–¥ –∑–∞ —Ç–µ–±—è! üòä\n–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?")
    elif query.data == MOOD_NORMAL:
        await query.edit_message_text(text="–ë—ã–≤–∞–µ—Ç –∏ –ª—É—á—à–µ, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ - –Ω–µ —É–Ω—ã–≤–∞—Ç—å! üôÇ")
    elif query.data == MOOD_BAD:
        await query.edit_message_text(
            text="–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —É —Ç–µ–±—è –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
            reply_markup=create_bad_mood_keyboard()
        )
    elif query.data == TELL_REASON:
        await query.edit_message_text(text="–Ø –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?")
        return MOOD  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
    elif query.data == NEED_HUG:
        await query.edit_message_text(text="–ö—Ä–µ–ø–∫–æ-–∫—Ä–µ–ø–∫–æ –æ–±–Ω–∏–º–∞—é! ü§ó\n–í—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text = update.message.text.lower()
    
    if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π']):
        await update.message.reply_text('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üëã')
    elif any(phrase in text for phrase in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']):
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:',
            reply_markup=create_mood_keyboard()
        )
    elif any(word in text for word in ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ']):
        await update.message.reply_text('–≠—Ç–æ —Ä–∞–¥—É–µ—Ç! üòä')
    elif any(word in text for word in ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ']):
        await update.message.reply_text(
            '–ù–µ –≥—Ä—É—Å—Ç–∏! –í—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è! üåà',
            reply_markup=create_bad_mood_keyboard()
        )
    else:
        await update.message.reply_text('–ü–æ–∫–∞ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ ü§ñ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async def reason_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    reason = update.message.text
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è. –Ø –∑–∞–ø–æ–º–Ω–∏–ª: {reason}\n"
        "–ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å."
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    await update.message.reply_text('–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å!')
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern=f'^{TELL_REASON}$')],
        states={
            MOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, reason_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()