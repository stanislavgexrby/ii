import logging
import gspread
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    CallbackQueryHandler,
    ConversationHandler
)
from google.oauth2.service_account import Credentials
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8495792418:AAFNWoOWEiC14yckH4vacJZkV561FcOaOsk"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'service-account.json'  # –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
SPREADSHEET_ID = '122HQvTSW-QDgkpc4KyWJkMmYqtYhY8B8F7l8_kU7wzw'  # ID –≤–∞—à–µ–π Google —Ç–∞–±–ª–∏—Ü—ã

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MOOD, REASON = range(2)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data
(
    MOOD_GOOD, MOOD_NORMAL, MOOD_BAD, 
    TELL_REASON, NEED_HUG, CANCEL
) = (
    'mood_good', 'mood_normal', 'mood_bad', 
    'tell_reason', 'need_hug', 'cancel'
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_data: Dict[int, Dict[str, Any]] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º"""
    try:
        creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.sheet1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
        if not worksheet.get_all_values():
            headers = [
                'Timestamp', 'User ID', 'First Name', 'Last Name', 
                'Username', 'Mood', 'Reason', 'Message'
            ]
            worksheet.append_row(headers)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.format('A1:H1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
            })
        
        return worksheet
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_mood_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ª–∏—á–Ω–æ! üòä", callback_data=MOOD_GOOD)],
        [InlineKeyboardButton("–ù–æ—Ä–º–∞–ª—å–Ω–æ üôÇ", callback_data=MOOD_NORMAL)],
        [InlineKeyboardButton("–ü–ª–æ—Ö–æ üòî", callback_data=MOOD_BAD)]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_bad_mood_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É", callback_data=TELL_REASON)],
        [InlineKeyboardButton("–ü—Ä–æ—Å—Ç–æ –æ–±–Ω—è—Ç—å ü§ó", callback_data=NEED_HUG)]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É
async def save_to_google_sheets(update: Update, mood: str, reason: str = "") -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    try:
        worksheet = init_google_sheets()
        if not worksheet:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º")
            return
        
        user = update.effective_user
        user_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = user_data.get(user_id, {})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        message_text = ""
        if update.message:
            message_text = update.message.text
        elif update.callback_query:
            message_text = update.callback_query.data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        first_name = user.first_name or ""
        last_name = user.last_name or ""
        username = f"@{user.username}" if user.username else ""
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        def clean_text(text):
            if not text:
                return ""
            return " ".join(str(text).split())
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        row_data = [
            clean_text(timestamp),
            clean_text(user_id),
            clean_text(first_name),
            clean_text(last_name),
            clean_text(username),
            clean_text(mood),
            clean_text(reason),
            clean_text(message_text)
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
        worksheet.append_row(row_data)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        last_row = len(worksheet.get_all_values())
        worksheet.format(f'A{last_row}:H{last_row}', {
            'textFormat': {'fontSize': 10},
            'borders': {
                'top': {'style': 'SOLID'},
                'bottom': {'style': 'SOLID'},
                'left': {'style': 'SOLID'},
                'right': {'style': 'SOLID'}
            }
        })
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏Ë∞ÉÊï¥ÂÆΩÂ∫¶ —Å—Ç–æ–ª–±—Ü–æ–≤
        try:
            worksheet.columns_auto_resize(0, 7)  # A-H columns
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ-Ë∞ÉÊï¥ÂÆΩÂ∫¶
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.effective_user.id
    user_data[user_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ç–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º.\n'
        '–ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?',
        reply_markup=create_mood_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if query.data == MOOD_GOOD:
        user_data[user_id]['mood'] = "–•–æ—Ä–æ—à–µ–µ"
        await save_to_google_sheets(update, "–•–æ—Ä–æ—à–µ–µ")
        await query.edit_message_text(text="–ö—Ä—É—Ç–æ! –†–∞–¥ –∑–∞ —Ç–µ–±—è! üòä\n–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?")
    elif query.data == MOOD_NORMAL:
        user_data[user_id]['mood'] = "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"
        await save_to_google_sheets(update, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ")
        await query.edit_message_text(text="–ë—ã–≤–∞–µ—Ç –∏ –ª—É—á—à–µ, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ - –Ω–µ —É–Ω—ã–≤–∞—Ç—å! üôÇ")
    elif query.data == MOOD_BAD:
        user_data[user_id]['mood'] = "–ü–ª–æ—Ö–æ–µ"
        await query.edit_message_text(
            text="–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —É —Ç–µ–±—è –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
            reply_markup=create_bad_mood_keyboard()
        )
    elif query.data == TELL_REASON:
        await query.edit_message_text(text="–Ø –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?")
        return MOOD  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
    elif query.data == NEED_HUG:
        user_data[user_id]['mood'] = "–ü–ª–æ—Ö–æ–µ"
        await save_to_google_sheets(update, "–ü–ª–æ—Ö–æ–µ", "–ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        await query.edit_message_text(text="–ö—Ä–µ–ø–∫–æ-–∫—Ä–µ–ø–∫–æ –æ–±–Ω–∏–º–∞—é! ü§ó\n–í—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text = update.message.text.lower()
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}
    
    if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π']):
        await update.message.reply_text('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üëã')
    elif any(phrase in text for phrase in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']):
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:',
            reply_markup=create_mood_keyboard()
        )
    elif any(word in text for word in ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ']):
        user_data[user_id]['mood'] = "–•–æ—Ä–æ—à–µ–µ"
        await save_to_google_sheets(update, "–•–æ—Ä–æ—à–µ–µ")
        await update.message.reply_text('–≠—Ç–æ —Ä–∞–¥—É–µ—Ç! üòä')
    elif any(word in text for word in ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ']):
        user_data[user_id]['mood'] = "–ü–ª–æ—Ö–æ–µ"
        await update.message.reply_text(
            '–ù–µ –≥—Ä—É—Å—Ç–∏! –í—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è! üåà',
            reply_markup=create_bad_mood_keyboard()
        )
    else:
        await update.message.reply_text('–ü–æ–∫–∞ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ ü§ñ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async def reason_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    reason = update.message.text
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mood = user_data.get(user_id, {}).get('mood', '–ü–ª–æ—Ö–æ–µ')
    
    await save_to_google_sheets(update, mood, reason)
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è. –Ø –∑–∞–ø–æ–º–Ω–∏–ª: {reason}\n"
        "–ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å."
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    user_id = update.effective_user.id
    if user_id in user_data:
        del user_data[user_id]
    
    await update.message.reply_text('–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å!')
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
    worksheet = init_google_sheets()
    if worksheet:
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.")
    
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern=f'^{TELL_REASON}$')],
        states={
            MOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, reason_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()